quantile(sqrt(s2_2.postsample),c(0.025,0.975))
quantile(theta_3.postsample,c(0.025,0.975))
quantile(sqrt(s2_3.postsample),c(0.025,0.975))
mean(theta_1.postsample)
mean(theta_1.postsample); quantile(theta_1.postsample,c(0.025,0.975))
mean(sqrt(s2_1.postsample)); quantile(sqrt(s2_1.postsample),c(0.025,0.975))
mean(theta_1.postsample); quantile(theta_1.postsample,c(0.025,0.975))
mean(sqrt(s2_1.postsample)); quantile(sqrt(s2_1.postsample),c(0.025,0.975))
mean(theta_2.postsample); quantile(theta_2.postsample,c(0.025,0.975))
mean(sqrt(s2_2.postsample)); quantile(sqrt(s2_2.postsample),c(0.025,0.975))
mean(theta_3.postsample); quantile(theta_3.postsample,c(0.025,0.975))
mean(sqrt(s2_3.postsample)); quantile(sqrt(s2_3.postsample),c(0.025,0.975))
s
mean(theta_1.postsample < theta_2.postsample&theta_1.postsample<theta_3.postsample&theta_.postsample<theta_1.postsample)
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_3.postsample < theta_2.postsample)
#1<2<3
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
#1<3<2
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_3.postsample < theta_2.postsample)
#2<1<3
mean(theta_2.postsample < theta_1.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
#2<3<1
mean(theta_2.postsample < theta_1.postsample & theta_3.postsample < theta_1.postsample & theta_2.postsample < theta_3.postsample)
#3<2<1
mean(theta_3.postsample < theta_2.postsample & theta_3.postsample < theta_1.postsample & theta_2.postsample < theta_1.postsample)
#3<1<2
mean(theta_3.postsample < theta_2.postsample & theta_3.postsample < theta_1.postsample & theta_1.postsample < theta_2.postsample)
###################################### Q 5.1 (c) ##############################
#1<2<3
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#1<3<2
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_3.postsample < y_tilde_2.postsample)
#2<1<3
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#2<3<1
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#3<2<1
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_1.postsample)
#3<1<2
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_2.postsample)
mean(y_tilde_1.postsample > y_tilde_2.postsample & y_tilde_1.postsample > y_tilde_3.postsample &
theta_1.postsample > theta_2.postsample & theta_1.postsample > theta_3.postsample)
mean(theta_1.postsample); quantile(theta_1.postsample,c(0.025,0.975))
mean(sqrt(s2_1.postsample)); quantile(sqrt(s2_1.postsample),c(0.025,0.975))
mean(theta_2.postsample); quantile(theta_2.postsample,c(0.025,0.975))
mean(sqrt(s2_2.postsample)); quantile(sqrt(s2_2.postsample),c(0.025,0.975))
mean(theta_3.postsample); quantile(theta_3.postsample,c(0.025,0.975))
mean(sqrt(s2_3.postsample)); quantile(sqrt(s2_3.postsample),c(0.025,0.975))
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
#1<3<2
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_3.postsample < theta_2.postsample)
#2<1<3
mean(theta_2.postsample < theta_1.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
#2<3<1
mean(theta_2.postsample < theta_1.postsample & theta_3.postsample < theta_1.postsample & theta_2.postsample < theta_3.postsample)
#3<2<1
mean(theta_3.postsample < theta_2.postsample & theta_3.postsample < theta_1.postsample & theta_2.postsample < theta_1.postsample)
#3<1<2
mean(theta_3.postsample < theta_2.postsample & theta_3.postsample < theta_1.postsample & theta_1.postsample < theta_2.postsample)
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#1<3<2
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_3.postsample < y_tilde_2.postsample)
#2<1<3
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#2<3<1
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#3<2<1
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_1.postsample)
#3<1<2
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_2.postsample)
mean(y_tilde_1.postsample > y_tilde_2.postsample & y_tilde_1.postsample > y_tilde_3.postsample & theta_1.postsample > theta_2.postsample & theta_1.postsample > theta_3.postsample)
########################################### Problem 5.2
#prior
mu0 <-75 ; s20 <- 100 ; k0 <- 1; nu0 <- 2
#data
ybar_1 <-75.2 ; n_1 <- 16 ; s2_1 <- 7.3^2
ybar_2 <-77.5 ; n_2 <- 16 ; s2_2 <- 8.1^2
k0 <- 1; nu0 <- 1
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
mean(theta_1.postsample < theta_2.postsample)
? for
?for
loop
1:2:32
for (i in 1:2:32 ) {
k0 <- i; nu0 <- i
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
foo[i] <- mean(theta_1.postsample < theta_2.postsample)
}
foo = seq(1, 32, by=2)
foo
1:2:32
1:32:2
foo = seq(1, 32, by=1)
in 1:32
1:32
foo = seq(1, 32, by=1)
for (i in 1:32 ) {
k0 <- i; nu0 <- i
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
foo[i] <- mean(theta_1.postsample < theta_2.postsample)
}
foo
foo1 = seq(1, 32, by=1)
foo2 = seq(1, 32, by=1)
for (i in 1:32 ) {
k0 <- i; nu0 <- i
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
foo1[i] <- mean(theta_1.postsample < theta_2.postsample)
}
plot(foo1, foo2)
foo1
foo1 = seq(1, 32, by=1)
foo2 = seq(1, 32, by=1)
for (i in 1:32 ) {
k0 <- i; nu0 <- i
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
foo2[i] <- mean(theta_1.postsample < theta_2.postsample)
}
plot(foo1, foo2)
plot(foo1, foo2, xlabel='K0', ylabel='Prob(thetaA<thetaB')
?xlabel
?plot
plot(foo1, foo2, xlab='K0', ylab='Prob(thetaA<thetaB')
max=100
foo1 = seq(1, max, by=1)
foo2 = seq(1, max, by=1)
for (i in 1:32 ) {
k0 <- i; nu0 <- i
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
foo2[i] <- mean(theta_1.postsample < theta_2.postsample)
}
plot(foo1, foo2, xlab='K0', ylab='Prob(thetaA<thetaB)')
max=32
foo1 = seq(1, max, by=1)
foo2 = seq(1, max, by=1)
for (i in 1:32 ) {
k0 <- i; nu0 <- i
# posterior inference for ***************************** dataA
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
s2_1.postsample <- 1/rgamma(10000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(10000, mun_1, sqrt(s2_1.postsample/kn_1))
# posterior inference for ***************************** dataB
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(10000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(10000, mun_2, sqrt(s2_2.postsample/kn_2))
foo2[i] <- mean(theta_1.postsample < theta_2.postsample)
}
plot(foo1, foo2, xlab='K0', ylab='Prob(thetaA<thetaB)')
plot(foo1, foo2, xlab='K0 value in the prior', ylab='Prob(thetaA<thetaB)', main='Impact of K0 on Probability of thetaA < thetaB')
########################################### Problem 5.1
#prior
mu0 <-5 ; s20 <- 4 ; k0 <- 1; nu0 <- 2
#data
y_1 <- c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65,14.53,9.61,7.38,3.34,9.06,9.45,5.98,7.44,8.5,1.55,11.45,9.73)
ybar_1 <-mean(y_1) ; n_1 <- length(y_1) ; s2_1 <- var(y_1)
y_2 <- c(0.29,1.13,6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43,10.64,12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
ybar_2 <-mean(y_2) ; n_2 <- length(y_2) ; s2_2 <- var(y_2)
y_3 <- c(4.33,7.77,4.15,5.64,7.69,5.04,10.01,13.43,13.63,9.9,5.72,5.16,4.33,12.9,11.27,6.05,0.95,6.02,12.22,12.85)
ybar_3 <-mean(y_3) ; n_3 <- length(y_3) ; s2_3 <- var(y_3)
# posterior inference for ***************************** data1
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
# generate the sigma and theta given data
s2_1.postsample <- 1/rgamma(100000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(100000, mun_1, sqrt(s2_1.postsample/kn_1))
# generate y predicted given sigma and data
# given (theta,sigma), Y tilde simply has a normal distribution with
# mean theta and variance sigma^2.
# So the following step is to draw a value from N(theta,sigma^2),
# where (theta,sigma) were drawn in step above.
y_tilde_1.postsample <- rnorm(100000, theta_1.postsample, s2_1.postsample)
# posterior inference for ***************************** data2
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(100000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(100000, mun_2, sqrt(s2_2.postsample/kn_2))
y_tilde_2.postsample <- rnorm(100000, theta_2.postsample, s2_2.postsample)
# posterior inference for ***************************** data3
kn_3 <- k0+n_3 ; nun_3 <- nu0 +n_3;
mun_3 <- (k0*mu0 + n_3*ybar_3)/kn_3;
s2n_3 <- (nu0*s20 + (n_3 - 1)*s2_3 + k0*n_3*(ybar_3 - mu0)^2/(kn_3))/(nun_3)
s2_3.postsample <- 1/rgamma(100000, nun_3/2, s2n_3*nun_3/2)
theta_3.postsample <- rnorm(100000, mun_3, sqrt(s2_3.postsample/kn_3))
y_tilde_3.postsample <- rnorm(100000, theta_3.postsample, s2_3.postsample)
###################################### Q 5.1 (a) ##############################
mean(theta_1.postsample); quantile(theta_1.postsample,c(0.025,0.975))
mean(sqrt(s2_1.postsample)); quantile(sqrt(s2_1.postsample),c(0.025,0.975))
mean(theta_2.postsample); quantile(theta_2.postsample,c(0.025,0.975))
mean(sqrt(s2_2.postsample)); quantile(sqrt(s2_2.postsample),c(0.025,0.975))
mean(theta_3.postsample); quantile(theta_3.postsample,c(0.025,0.975))
mean(sqrt(s2_3.postsample)); quantile(sqrt(s2_3.postsample),c(0.025,0.975))
###################################### Q 5.1 (b) ##############################
#1<2<3
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
#1<3<2
mean(theta_1.postsample < theta_2.postsample & theta_1.postsample < theta_3.postsample & theta_3.postsample < theta_2.postsample)
#2<1<3
mean(theta_2.postsample < theta_1.postsample & theta_1.postsample < theta_3.postsample & theta_2.postsample < theta_3.postsample)
#2<3<1
mean(theta_2.postsample < theta_1.postsample & theta_3.postsample < theta_1.postsample & theta_2.postsample < theta_3.postsample)
#3<2<1
mean(theta_3.postsample < theta_2.postsample & theta_3.postsample < theta_1.postsample & theta_2.postsample < theta_1.postsample)
#3<1<2
mean(theta_3.postsample < theta_2.postsample & theta_3.postsample < theta_1.postsample & theta_1.postsample < theta_2.postsample)
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#1<3<2
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_3.postsample < y_tilde_2.postsample)
#2<1<3
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#2<3<1
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#3<2<1
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_1.postsample)
#3<1<2
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_2.postsample)
mean(y_tilde_1.postsample > y_tilde_2.postsample & y_tilde_1.postsample > y_tilde_3.postsample)
mean(theta_1.postsample > theta_2.postsample & theta_1.postsample > theta_3.postsample)
########################################### Problem 5.1
#prior
mu0 <-5 ; s20 <- 4 ; k0 <- 1; nu0 <- 2
#data
y_1 <- c(2.11,9.75,13.88,11.3,8.93,15.66,16.38,4.54,8.86,11.94,12.47,11.11,11.65,14.53,9.61,7.38,3.34,9.06,9.45,5.98,7.44,8.5,1.55,11.45,9.73)
ybar_1 <-mean(y_1) ; n_1 <- length(y_1) ; s2_1 <- var(y_1)
y_2 <- c(0.29,1.13,6.52,11.72,6.54,5.63,14.59,11.74,9.12,9.43,10.64,12.28,9.5,0.63,15.35,5.31,8.49,3.04,3.77,6.22,2.14,6.58,1.11)
ybar_2 <-mean(y_2) ; n_2 <- length(y_2) ; s2_2 <- var(y_2)
y_3 <- c(4.33,7.77,4.15,5.64,7.69,5.04,10.01,13.43,13.63,9.9,5.72,5.16,4.33,12.9,11.27,6.05,0.95,6.02,12.22,12.85)
ybar_3 <-mean(y_3) ; n_3 <- length(y_3) ; s2_3 <- var(y_3)
# posterior inference for ***************************** data1
kn_1 <- k0+n_1 ; nun_1 <- nu0 +n_1;
mun_1 <- (k0*mu0 + n_1*ybar_1)/kn_1;
s2n_1 <- (nu0*s20 + (n_1 - 1)*s2_1 + k0*n_1*(ybar_1 - mu0)^2/(kn_1))/(nun_1)
# generate the sigma and theta given data
s2_1.postsample <- 1/rgamma(100000, nun_1/2, s2n_1*nun_1/2)
theta_1.postsample <- rnorm(100000, mun_1, sqrt(s2_1.postsample/kn_1))
# generate y predicted given sigma and data
# given (theta,sigma), Y tilde simply has a normal distribution with
# mean theta and variance sigma^2.
# So the following step is to draw a value from N(theta,sigma^2),
# where (theta,sigma) were drawn in step above.
y_tilde_1.postsample <- rnorm(100000, theta_1.postsample, sqrt(s2_1.postsample))
# posterior inference for ***************************** data2
kn_2 <- k0+n_2 ; nun_2 <- nu0 +n_2;
mun_2 <- (k0*mu0 + n_2*ybar_2)/kn_2;
s2n_2 <- (nu0*s20 + (n_2 - 1)*s2_2 + k0*n_2*(ybar_2 - mu0)^2/(kn_2))/(nun_2)
s2_2.postsample <- 1/rgamma(100000, nun_2/2, s2n_2*nun_2/2)
theta_2.postsample <- rnorm(100000, mun_2, sqrt(s2_2.postsample/kn_2))
y_tilde_2.postsample <- rnorm(100000, theta_2.postsample, sqrt(s2_2.postsample))
# posterior inference for ***************************** data3
kn_3 <- k0+n_3 ; nun_3 <- nu0 +n_3;
mun_3 <- (k0*mu0 + n_3*ybar_3)/kn_3;
s2n_3 <- (nu0*s20 + (n_3 - 1)*s2_3 + k0*n_3*(ybar_3 - mu0)^2/(kn_3))/(nun_3)
s2_3.postsample <- 1/rgamma(100000, nun_3/2, s2n_3*nun_3/2)
theta_3.postsample <- rnorm(100000, mun_3, sqrt(s2_3.postsample/kn_3))
y_tilde_3.postsample <- rnorm(100000, theta_3.postsample, sqrt(s2_3.postsample))
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#1<3<2
mean(y_tilde_1.postsample < y_tilde_2.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_3.postsample < y_tilde_2.postsample)
#2<1<3
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_3.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#2<3<1
mean(y_tilde_2.postsample < y_tilde_1.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_3.postsample)
#3<2<1
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_2.postsample < y_tilde_1.postsample)
#3<1<2
mean(y_tilde_3.postsample < y_tilde_2.postsample & y_tilde_3.postsample < y_tilde_1.postsample & y_tilde_1.postsample < y_tilde_2.postsample)
mean(y_tilde_1.postsample > y_tilde_2.postsample & y_tilde_1.postsample > y_tilde_3.postsample)
mean(theta_1.postsample > theta_2.postsample & theta_1.postsample > theta_3.postsample)
? dnorm
dnorm(3,5,2)
dnorm(1.96,0)
dnorm(5,0)
2000*(1.04)^20
2000*(1.035)^20
2000*(1.05)^20
library(kernlab)
install.packages("kernlab")
library(kernlab)
data
data(Spam)
data(spam)
str[spam(1:5)]
str[spam[1:5]]
str[spam[,1:5]]
str(spam[,1:5])
? str
id =rbinom(4500, size=1, prob=0.5)
sum(id)
head(spam)
table(spam$type)
table(spam$captalAve)
table(spam$capitalAve)
table(spam$capitalAve ~ spam$type)
plot(spam$capitalAve ~ spam$type)
library(kernlab)
data(spam)
length(data)
length(data[,1])
length(spam[,1])
trainIndicator = rbinom(length(spam[,1]), size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam)
table(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dis(t(trainSpam[,1:57])))
hCluster = hclust(dis(t(trainSpam[,1:57])))
hCluster = hclust(dist(t(trainSpam[,1:57])))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57])))
plot(hClusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57])))
plot(hClusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57]))))
plot(hClusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:57] +1))))
plot(hClusterUpdated)
trainSpamType =as.numeric(trainSpam$type) - 1
names(trainSpam[1])
trainSpamType =as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum(x !=(y>0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response ="numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] =cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam[which.min(cvError)])
trainSpam$numType =as.numeric(trainSpam$type) - 1
costFunction = function(x,y) sum(x !=(y>0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response ="numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] =cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam[which.min(cvError)])
predictionModel = glm(numType ~ charDollar, family = "binomial", data =trainSpam)
predictionModel
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted>0.5]="spam"
table(predictedSpam, testSpam$type)
x <-1
print(x)
msg <- "Hello"
x <- 1:20
x
x <- c(TRUE, F)
x
x <- vector("numeric", length=10)
x
y <- c("a",T)
y
m <- matrix(nrow=3, ncol=2)
m
m <- matrix(1:6, nrow=3, ncol=2)
m
attribute(m)
attribute(m)
?? attribute
attribute(m)
attributes(m)
m$dim
dim(m)
dim(m)[1]
dim(m)[2]
a <- available.packages()
head(a)
head(rownames(a),3)
head(rownames(a),3)[1]
head(rownames(a),3)[[1]
]
head(rownames(a),3)[[1]]
install.packages("slidify")
install.packages(c("slidify","ggplot2","devtools")
)
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
search()
find.package("devtools")
library(devtools)
library(slidify)
install.packages("slidify")
library(slidify)
install.packages("xtable")
install.packages("slidify")
library(slidify)
newdata <- training[, which(colnames(training)=='IL_6')]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
newdata <- training[, which(colnames(training)=='IL_6')]
newdata <- training[, grep("IL+",colnames(training))]
View(newdata)
View(newdata)
data_pca <- newdata[,-1]
View(data_pca)
View(data_pca)
View(newdata)
View(newdata)
data_pca <- newdata[,-13]
View(data_pca)
View(data_pca)
preProc <- preProcess(data_pca), method="pca",pcaComp=5)
preProc <- preProcess((data_pca), method="pca",pcaComp=5)
mypca <-preProc <- preProcess((data_pca), method="pca",pcaComp=5)
mypca
summary(my_pca)
summary(mypca)
?preProcess
mypca$numComp
mypca$pcaComp
mypca <-preProc <- preProcess((data_pca), method="pca",thresh = 0.9)
mypca$rotation
# q5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
setwd("C:/Users/James Fan/Desktop/Courera_DA/Reproducible/proj1")
